from docplex.mp.model import Model

# Create a new model
mdl = Model(name='TAPC_Transportation')

# Sets and Parameters (example values)
V = ['Station1', 'Station2', 'Station3']  # set of all stations
T = [1, 2, 3]  # set of time periods
D = {(o, t, d): 10 for o in V for t in T for d in V}  # demand function f(o, t, d)
C = 20  # vehicle capacity
W = {(o, d): 15 for o in V for d in V}  # travel durations wa
d = {(o, d): 10 for o in V for d in V}  # shortest path travel time

# Variables
N = mdl.integer_var(name='N')  # number of vehicles
x = mdl.integer_var_dict(((k, o, t, d) for k in range(1, 101) for o in V for t in T for d in V), name='x')
t = mdl.continuous_var_dict(((k, o, d) for k in range(1, 101) for o in V for d in V), name='t')

# Objective
mdl.minimize(N)

# Constraints
# Demand satisfaction
for o in V:
    for t in T:
        for d in V:
            mdl.add_constraint(mdl.sum(x[k, o, t, d] for k in range(1, 101)) >= D[o, t, d], f'demand_satisfaction_{o}_{t}_{d}')

# Capacity constraints
for k in range(1, 101):
    for o in V:
        for t in T:
            for d in V:
                mdl.add_constraint(x[k, o, t, d] <= C, f'capacity_{k}_{o}_{t}_{d}')

# Total passenger constraint
for k in range(1, 101):
    for o in V:
        for t in T:
            for d in V:
                mdl.add_constraint(mdl.sum(x[k, o, t, d] for o in V for t in T for d in V) <= C * N, f'total_passenger_{k}_{o}_{t}_{d}')

# Delay constraint
for k in range(1, 101):
    for o in V:
        for d in V:
            mdl.add_constraint(t[k, o, d] <= 1.3 * d[o, d], f'delay_{k}_{o}_{d}')

# Solve the model
solution = mdl.solve()

# Print the solution
if solution:
    print(f'Minimum number of vehicles required: {solution[N]}')
    for k in range(1, 101):
        for o in V:
            for t in T:
                for d in V:
                    if solution[x[k, o, t, d]] > 0:
                        print(f'Vehicle {k} transports {solution[x[k, o, t, d]]} passengers from {o} to {d} at time {t}')
else:
    print("No solution found")
from docplex.mp.model import Model

# Create a new model
mdl = Model(name='TAPC_Transportation')

# Sets and Parameters (example values)
V = ['Station1', 'Station2', 'Station3']  # set of all stations
T = [1, 2, 3]  # set of time periods
D = {(o, t, d): 10 for o in V for t in T for d in V}  # demand function f(o, t, d)
C = 20  # vehicle capacity
W = {(o, d): 15 for o in V for d in V}  # travel durations wa
d = {(o, d): 10 for o in V for d in V}  # shortest path travel time

# Variables
N = mdl.integer_var(name='N')  # number of vehicles
x = mdl.integer_var_dict(((k, o, t, d) for k in range(1, 101) for o in V for t in T for d in V), name='x')
t = mdl.continuous_var_dict(((k, o, d) for k in range(1, 101) for o in V for d in V), name='t')

# Objective
mdl.minimize(N)

# Constraints
# Demand satisfaction
for o in V:
    for t in T:
        for d in V:
            mdl.add_constraint(mdl.sum(x[k, o, t, d] for k in range(1, 101)) >= D[o, t, d], f'demand_satisfaction_{o}_{t}_{d}')

# Capacity constraints
for k in range(1, 101):
    for o in V:
        for t in T:
            for d in V:
                mdl.add_constraint(x[k, o, t, d] <= C, f'capacity_{k}_{o}_{t}_{d}')

# Total passenger constraint
for k in range(1, 101):
    for o in V:
        for t in T:
            for d in V:
                mdl.add_constraint(mdl.sum(x[k, o, t, d] for o in V for t in T for d in V) <= C * N, f'total_passenger_{k}_{o}_{t}_{d}')

# Delay constraint
for k in range(1, 101):
    for o in V:
        for d in V:
            mdl.add_constraint(t[k, o, d] <= 1.3 * d[o, d], f'delay_{k}_{o}_{d}')

# Solve the model
solution = mdl.solve()

# Print the solution
if solution:
    print(f'Minimum number of vehicles required: {solution[N]}')
    for k in range(1, 101):
        for o in V:
            for t in T:
                for d in V:
                    if solution[x[k, o, t, d]] > 0:
                        print(f'Vehicle {k} transports {solution[x[k, o, t, d]]} passengers from {o} to {d} at time {t}')
else:
    print("No solution found")
